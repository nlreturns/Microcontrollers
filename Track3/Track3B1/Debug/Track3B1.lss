
Track3B1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000232  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800106  00800106  000002cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd8  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d5  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000788  00000000  00000000  0000184d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001133d  00000000  00000000  000020dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e2  00000000  00000000  00013419  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000136fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000002f0  00000000  00000000  00013753  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	72 c0       	rjmp	.+228    	; 0x10e <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	47 c0       	rjmp	.+142    	; 0xc8 <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b0 d0       	rcall	.+352    	; 0x224 <main>
  c4:	b4 c0       	rjmp	.+360    	; 0x22e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_14>:
	switch(row){
		case 0:
			lcd_command(0x80 + position);
			break;
		case 1:
			lcd_command(0xC0 + position);
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	82 e1       	ldi	r24, 0x12	; 18
  d8:	9a e7       	ldi	r25, 0x7A	; 122
  da:	9d bd       	out	0x2d, r25	; 45
  dc:	8c bd       	out	0x2c, r24	; 44
  de:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <counter>
  e2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <counter+0x1>
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	8a 30       	cpi	r24, 0x0A	; 10
  ea:	91 05       	cpc	r25, r1
  ec:	2c f4       	brge	.+10     	; 0xf8 <__vector_14+0x30>
  ee:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <counter+0x1>
  f2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <counter>
  f6:	04 c0       	rjmp	.+8      	; 0x100 <__vector_14+0x38>
  f8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <counter+0x1>
  fc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <counter>
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <__vector_10>:
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 120:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 12a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 12e:	8f e0       	ldi	r24, 0x0F	; 15
 130:	84 bd       	out	0x24, r24	; 36
 132:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 136:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 13a:	0f 97       	sbiw	r24, 0x0f	; 15
 13c:	11 f4       	brne	.+4      	; 0x142 <__vector_10+0x34>
 13e:	80 e8       	ldi	r24, 0x80	; 128
 140:	82 bb       	out	0x12, r24	; 18
 142:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 146:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 14a:	88 97       	sbiw	r24, 0x28	; 40
 14c:	29 f4       	brne	.+10     	; 0x158 <__vector_10+0x4a>
 14e:	15 ba       	out	0x15, r1	; 21
 150:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 154:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <lcd_command>:
 166:	98 2f       	mov	r25, r24
 168:	90 7f       	andi	r25, 0xF0	; 240
 16a:	95 bb       	out	0x15, r25	; 21
 16c:	ab 9a       	sbi	0x15, 3	; 21
 16e:	ef e1       	ldi	r30, 0x1F	; 31
 170:	fe e4       	ldi	r31, 0x4E	; 78
 172:	31 97       	sbiw	r30, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_command+0xc>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_command+0x12>
 178:	00 00       	nop
 17a:	94 e0       	ldi	r25, 0x04	; 4
 17c:	95 bb       	out	0x15, r25	; 21
 17e:	f0 e1       	ldi	r31, 0x10	; 16
 180:	8f 9f       	mul	r24, r31
 182:	c0 01       	movw	r24, r0
 184:	11 24       	eor	r1, r1
 186:	85 bb       	out	0x15, r24	; 21
 188:	ab 9a       	sbi	0x15, 3	; 21
 18a:	8f e1       	ldi	r24, 0x1F	; 31
 18c:	9e e4       	ldi	r25, 0x4E	; 78
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_command+0x28>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_command+0x2e>
 194:	00 00       	nop
 196:	15 ba       	out	0x15, r1	; 21
 198:	08 95       	ret

0000019a <init>:
 19a:	2f e7       	ldi	r18, 0x7F	; 127
 19c:	8b e8       	ldi	r24, 0x8B	; 139
 19e:	98 e0       	ldi	r25, 0x08	; 8
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <init+0x6>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <init+0x10>
 1aa:	00 00       	nop
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	db df       	rcall	.-74     	; 0x166 <lcd_command>
 1b0:	88 e2       	ldi	r24, 0x28	; 40
 1b2:	d9 df       	rcall	.-78     	; 0x166 <lcd_command>
 1b4:	8c e0       	ldi	r24, 0x0C	; 12
 1b6:	d7 df       	rcall	.-82     	; 0x166 <lcd_command>
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	d5 df       	rcall	.-86     	; 0x166 <lcd_command>
 1bc:	80 e8       	ldi	r24, 0x80	; 128
 1be:	d3 cf       	rjmp	.-90     	; 0x166 <lcd_command>
 1c0:	08 95       	ret

000001c2 <lcd_writeChar>:
	PORTC = 0x00;
}

void lcd_writeChar(unsigned char dat)
{
	PORTC = dat & 0xF0;
 1c2:	98 2f       	mov	r25, r24
 1c4:	90 7f       	andi	r25, 0xF0	; 240
 1c6:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x0C;
 1c8:	95 b3       	in	r25, 0x15	; 21
 1ca:	9c 60       	ori	r25, 0x0C	; 12
 1cc:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	ef e1       	ldi	r30, 0x1F	; 31
 1d0:	fe e4       	ldi	r31, 0x4E	; 78
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_writeChar+0x10>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_writeChar+0x16>
 1d8:	00 00       	nop
	_delay_ms(10);
	PORTC = 0x04;
 1da:	94 e0       	ldi	r25, 0x04	; 4
 1dc:	95 bb       	out	0x15, r25	; 21
	PORTC = (dat & 0x0F) << 4;
 1de:	f0 e1       	ldi	r31, 0x10	; 16
 1e0:	8f 9f       	mul	r24, r31
 1e2:	c0 01       	movw	r24, r0
 1e4:	11 24       	eor	r1, r1
 1e6:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x0C;
 1e8:	85 b3       	in	r24, 0x15	; 21
 1ea:	8c 60       	ori	r24, 0x0C	; 12
 1ec:	85 bb       	out	0x15, r24	; 21
 1ee:	8f e1       	ldi	r24, 0x1F	; 31
 1f0:	9e e4       	ldi	r25, 0x4E	; 78
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_writeChar+0x30>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <lcd_writeChar+0x36>
 1f8:	00 00       	nop
	_delay_ms(10);
	PORTC = 0x00;
 1fa:	15 ba       	out	0x15, r1	; 21
 1fc:	08 95       	ret

000001fe <lcd_writeLine1>:
			lcd_command(0xC0 + position);
			break;
	}
}

void lcd_writeLine1 (char text1[]){
 1fe:	0f 93       	push	r16
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	8c 01       	movw	r16, r24
	lcd_command(0x80);
 208:	80 e8       	ldi	r24, 0x80	; 128
 20a:	ad df       	rcall	.-166    	; 0x166 <lcd_command>
 20c:	c0 e1       	ldi	r28, 0x10	; 16
 20e:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0;i<16;i++)
		lcd_writeChar(text1[1]);
 210:	f8 01       	movw	r30, r16
 212:	81 81       	ldd	r24, Z+1	; 0x01
 214:	d6 df       	rcall	.-84     	; 0x1c2 <lcd_writeChar>
 216:	21 97       	sbiw	r28, 0x01	; 1
	}
}

void lcd_writeLine1 (char text1[]){
	lcd_command(0x80);
	for(int i=0;i<16;i++)
 218:	d9 f7       	brne	.-10     	; 0x210 <lcd_writeLine1+0x12>
		lcd_writeChar(text1[1]);
}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	08 95       	ret

00000224 <main>:
void lcd_writeLine1(char text1[]);

int main (void)
{

	init();
 224:	ba df       	rcall	.-140    	; 0x19a <init>
	//set_cursor(0,0);
	lcd_writeLine1("Tekst");
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	e9 df       	rcall	.-46     	; 0x1fe <lcd_writeLine1>
		lcd_writeChar(write);
		_delay_ms(1);
	}//*/
	while(1){

	}
 22c:	ff cf       	rjmp	.-2      	; 0x22c <main+0x8>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
