
Track2B3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000093d  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083f  00000000  00000000  00000bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000054d  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001948  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000075ef  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000294  00000000  00000000  00008f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000920f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000228  00000000  00000000  0000922f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	5b c0       	rjmp	.+182    	; 0xbc <__bad_interrupt>
   6:	00 00       	nop
   8:	59 c0       	rjmp	.+178    	; 0xbc <__bad_interrupt>
   a:	00 00       	nop
   c:	57 c0       	rjmp	.+174    	; 0xbc <__bad_interrupt>
   e:	00 00       	nop
  10:	55 c0       	rjmp	.+170    	; 0xbc <__bad_interrupt>
  12:	00 00       	nop
  14:	53 c0       	rjmp	.+166    	; 0xbc <__bad_interrupt>
  16:	00 00       	nop
  18:	51 c0       	rjmp	.+162    	; 0xbc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4f c0       	rjmp	.+158    	; 0xbc <__bad_interrupt>
  1e:	00 00       	nop
  20:	4d c0       	rjmp	.+154    	; 0xbc <__bad_interrupt>
  22:	00 00       	nop
  24:	4b c0       	rjmp	.+150    	; 0xbc <__bad_interrupt>
  26:	00 00       	nop
  28:	49 c0       	rjmp	.+146    	; 0xbc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	47 c0       	rjmp	.+142    	; 0xbc <__bad_interrupt>
  2e:	00 00       	nop
  30:	45 c0       	rjmp	.+138    	; 0xbc <__bad_interrupt>
  32:	00 00       	nop
  34:	43 c0       	rjmp	.+134    	; 0xbc <__bad_interrupt>
  36:	00 00       	nop
  38:	41 c0       	rjmp	.+130    	; 0xbc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3f c0       	rjmp	.+126    	; 0xbc <__bad_interrupt>
  3e:	00 00       	nop
  40:	3d c0       	rjmp	.+122    	; 0xbc <__bad_interrupt>
  42:	00 00       	nop
  44:	3b c0       	rjmp	.+118    	; 0xbc <__bad_interrupt>
  46:	00 00       	nop
  48:	39 c0       	rjmp	.+114    	; 0xbc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	37 c0       	rjmp	.+110    	; 0xbc <__bad_interrupt>
  4e:	00 00       	nop
  50:	35 c0       	rjmp	.+106    	; 0xbc <__bad_interrupt>
  52:	00 00       	nop
  54:	33 c0       	rjmp	.+102    	; 0xbc <__bad_interrupt>
  56:	00 00       	nop
  58:	31 c0       	rjmp	.+98     	; 0xbc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2f c0       	rjmp	.+94     	; 0xbc <__bad_interrupt>
  5e:	00 00       	nop
  60:	2d c0       	rjmp	.+90     	; 0xbc <__bad_interrupt>
  62:	00 00       	nop
  64:	2b c0       	rjmp	.+86     	; 0xbc <__bad_interrupt>
  66:	00 00       	nop
  68:	29 c0       	rjmp	.+82     	; 0xbc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	27 c0       	rjmp	.+78     	; 0xbc <__bad_interrupt>
  6e:	00 00       	nop
  70:	25 c0       	rjmp	.+74     	; 0xbc <__bad_interrupt>
  72:	00 00       	nop
  74:	23 c0       	rjmp	.+70     	; 0xbc <__bad_interrupt>
  76:	00 00       	nop
  78:	21 c0       	rjmp	.+66     	; 0xbc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1f c0       	rjmp	.+62     	; 0xbc <__bad_interrupt>
  7e:	00 00       	nop
  80:	1d c0       	rjmp	.+58     	; 0xbc <__bad_interrupt>
  82:	00 00       	nop
  84:	1b c0       	rjmp	.+54     	; 0xbc <__bad_interrupt>
  86:	00 00       	nop
  88:	19 c0       	rjmp	.+50     	; 0xbc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	77 00       	.word	0x0077	; ????
  8e:	7a 00       	.word	0x007a	; ????
  90:	7d 00       	.word	0x007d	; ????
  92:	80 00       	.word	0x0080	; ????
  94:	83 00       	.word	0x0083	; ????
  96:	86 00       	.word	0x0086	; ????
  98:	89 00       	.word	0x0089	; ????
  9a:	8c 00       	.word	0x008c	; ????
  9c:	8f 00       	.word	0x008f	; ????
  9e:	92 00       	.word	0x0092	; ????
  a0:	95 00       	.word	0x0095	; ????
  a2:	98 00       	.word	0x0098	; ????
  a4:	9b 00       	.word	0x009b	; ????
  a6:	9e 00       	.word	0x009e	; ????
  a8:	a1 00       	.word	0x00a1	; ????
  aa:	a4 00       	.word	0x00a4	; ????

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e1       	ldi	r29, 0x10	; 16
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	4d d0       	rcall	.+154    	; 0x154 <main>
  ba:	65 c0       	rjmp	.+202    	; 0x186 <_exit>

000000bc <__bad_interrupt>:
  bc:	a1 cf       	rjmp	.-190    	; 0x0 <__vectors>

000000be <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
  be:	18 16       	cp	r1, r24
  c0:	19 06       	cpc	r1, r25
  c2:	6c f4       	brge	.+26     	; 0xde <wait+0x20>
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	ef ec       	ldi	r30, 0xCF	; 207
  ca:	f7 e0       	ldi	r31, 0x07	; 7
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <wait+0xe>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <wait+0x14>
  d2:	00 00       	nop
  d4:	2f 5f       	subi	r18, 0xFF	; 255
  d6:	3f 4f       	sbci	r19, 0xFF	; 255
  d8:	28 17       	cp	r18, r24
  da:	39 07       	cpc	r19, r25
  dc:	a9 f7       	brne	.-22     	; 0xc8 <wait+0xa>
  de:	08 95       	ret

000000e0 <display>:
	}
}

void display(int digit){

	switch(digit){
  e0:	80 31       	cpi	r24, 0x10	; 16
  e2:	91 05       	cpc	r25, r1
  e4:	a0 f5       	brcc	.+104    	; 0x14e <display+0x6e>
  e6:	fc 01       	movw	r30, r24
  e8:	ea 5b       	subi	r30, 0xBA	; 186
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	43 c0       	rjmp	.+134    	; 0x174 <__tablejump2__>
		case 0:
			PORTA = 0b00111111;
  ee:	8f e3       	ldi	r24, 0x3F	; 63
  f0:	8b bb       	out	0x1b, r24	; 27
			break;
  f2:	08 95       	ret
		case 1:
			PORTA = 0b00000110;
  f4:	86 e0       	ldi	r24, 0x06	; 6
  f6:	8b bb       	out	0x1b, r24	; 27
			break;
  f8:	08 95       	ret
		case 2:
			PORTA = 0b01011011;
  fa:	8b e5       	ldi	r24, 0x5B	; 91
  fc:	8b bb       	out	0x1b, r24	; 27
			break;
  fe:	08 95       	ret
		case 3:
			PORTA = 0b01001111;
 100:	8f e4       	ldi	r24, 0x4F	; 79
 102:	8b bb       	out	0x1b, r24	; 27
			break;
 104:	08 95       	ret
		case 4:
			PORTA = 0b01100110;	
 106:	86 e6       	ldi	r24, 0x66	; 102
 108:	8b bb       	out	0x1b, r24	; 27
			break;
 10a:	08 95       	ret
		case 5:
			PORTA = 0b01101101;
 10c:	8d e6       	ldi	r24, 0x6D	; 109
 10e:	8b bb       	out	0x1b, r24	; 27
			break;
 110:	08 95       	ret
		case 6:
			PORTA = 0b01111101;
 112:	8d e7       	ldi	r24, 0x7D	; 125
 114:	8b bb       	out	0x1b, r24	; 27
			break;
 116:	08 95       	ret
		case 7:
			PORTA = 0b00000111;
 118:	87 e0       	ldi	r24, 0x07	; 7
 11a:	8b bb       	out	0x1b, r24	; 27
			break;
 11c:	08 95       	ret
		case 8:
			PORTA = 0b01111111;
 11e:	8f e7       	ldi	r24, 0x7F	; 127
 120:	8b bb       	out	0x1b, r24	; 27
			break;
 122:	08 95       	ret
		case 9:
			PORTA = 0b01101111;
 124:	8f e6       	ldi	r24, 0x6F	; 111
 126:	8b bb       	out	0x1b, r24	; 27
			break;
 128:	08 95       	ret
		case 10:
			PORTA = 0b01110111;
 12a:	87 e7       	ldi	r24, 0x77	; 119
 12c:	8b bb       	out	0x1b, r24	; 27
			break;
 12e:	08 95       	ret
		case 11:
			PORTA = 0b01111111;
 130:	8f e7       	ldi	r24, 0x7F	; 127
 132:	8b bb       	out	0x1b, r24	; 27
			break;
 134:	08 95       	ret
		case 12:
			PORTA = 0b00111001;
 136:	89 e3       	ldi	r24, 0x39	; 57
 138:	8b bb       	out	0x1b, r24	; 27
			break;
 13a:	08 95       	ret
		case 13:
			PORTA = 0b00111111;
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	8b bb       	out	0x1b, r24	; 27
			break;
 140:	08 95       	ret
		case 14:
			PORTA = 0b01111001;
 142:	89 e7       	ldi	r24, 0x79	; 121
 144:	8b bb       	out	0x1b, r24	; 27
			break;
 146:	08 95       	ret
		case 15:
			PORTA = 0b01110001;
 148:	81 e7       	ldi	r24, 0x71	; 113
 14a:	8b bb       	out	0x1b, r24	; 27
			break;
 14c:	08 95       	ret
		default:
			PORTA = 0b01111001;
 14e:	89 e7       	ldi	r24, 0x79	; 121
 150:	8b bb       	out	0x1b, r24	; 27
 152:	08 95       	ret

00000154 <main>:

}

int main( void )
{
	DDRA = 0xFF;
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	8a bb       	out	0x1a, r24	; 26

	while(1){
		//*
		for(int i = 0; i < 20; i++){
 158:	00 e0       	ldi	r16, 0x00	; 0
 15a:	10 e0       	ldi	r17, 0x00	; 0
 15c:	c0 2f       	mov	r28, r16
 15e:	d1 2f       	mov	r29, r17
			display(i);
 160:	ce 01       	movw	r24, r28
 162:	be df       	rcall	.-132    	; 0xe0 <display>
			wait(10);
 164:	8a e0       	ldi	r24, 0x0A	; 10
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	aa df       	rcall	.-172    	; 0xbe <wait>
{
	DDRA = 0xFF;

	while(1){
		//*
		for(int i = 0; i < 20; i++){
 16a:	21 96       	adiw	r28, 0x01	; 1
 16c:	c4 31       	cpi	r28, 0x14	; 20
 16e:	d1 05       	cpc	r29, r1
 170:	b9 f7       	brne	.-18     	; 0x160 <main+0xc>
 172:	f4 cf       	rjmp	.-24     	; 0x15c <main+0x8>

00000174 <__tablejump2__>:
 174:	ee 0f       	add	r30, r30
 176:	ff 1f       	adc	r31, r31
 178:	00 24       	eor	r0, r0
 17a:	00 1c       	adc	r0, r0
 17c:	0b be       	out	0x3b, r0	; 59
 17e:	07 90       	elpm	r0, Z+
 180:	f6 91       	elpm	r31, Z
 182:	e0 2d       	mov	r30, r0
 184:	09 94       	ijmp

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
